# 函数的实参传递

def func(a, b, c, d):
    print(a, b, c, d)


# 位置传参
# 说明：实参按照位置依次传递给形参的过程
# 注意：实参数据的个数必须等于形参的个数
# func(1, 2, 3, 4)
# func(1, 2, 3, 4, 5)   # TypeError: func() takes 4 positional arguments but 5 were given
# func(1, 2, 3)   # TypeError: func() missing 1 required positional argument: 'd'

# 序列传参
# 说明：使用 * 将序列拆解后，按照【位置传参】的过程
# 注意：序列中的数据个数必须和形参的个数一致
# lists = [3, 4, 5, 6]
# func(lists)    # 分开
# func(lists[0], lists[1], lists[2], lists[-1])
# func(*lists)  # * 将序列拆解后，按照位置传参的过程
# func(*'ABCD')
# func(*(11, 22, 33, 44))
# func(*{11, 22, 33, 44})
# func(*{'aa': 11, 'bb': 22, 'cc': 33, 'dd':44})


# 关键字传参
# 说明：实参传递时按照形参的名字匹配传递数据的过程。
# 注意：实参传递时的变量名要与形参列表中的变量名相同。
# func(c=1, d=2, b=3, a=4)
# func(c=1, d=2, b=3, a=4, c=22)
# func(c=1, d=2, b=3, A=4)


# 字典关键字传参
# 说明：使用 ** 对字典进行拆解后，按照【关键字传参】的过程。
# 注意：字典中key要与形参列表中的变量名要对应。
# d = {'a': 11, 'b': 22, 'c': 33, 'd':44}
# func(**d)
# func(**{'a': 11, 'b': 22, 'c': 33, 'd':44, 'e':55})


# 优先级
def func(a, b, c, d):
    print(a, b, c, d)


func(10, *(20, 30, 40))
func(*(20, 30, 40), 10)
func(b=20, c=30, **{'a': 10, 'd': 40})
func(**{'a': 10, 'd': 40}, b=20, c=30)
func(10, 20, d=20, c=30)
# func(d=20, c=30, 10, 20)

'''
    基于【位置】  --》 顺序（位置传参【序列传参】）
    基于【名字】  --》 无序（关键字传参【字典关键字传参】）
    
    数据多：
        序列传参： *序列
        字典关键字传参： **字典    
        
    优先级：
        位置传参【序列传参】 高于 关键字传参【字典关键字传参】
'''
