# 面向对象语法总结:
#
#
# class 类名:
#     # 类变量: 表达所有对象共有的数据  --> '大家的'
#     变量名 = 数据
#
#     # 构造方法: 多用于初始化实例变量
#     def __init__(self, 变量名1, 变量名2, ...)
#         # 实例变量(实例属性): 表达实例对象的特征
#         self.变量名 = 变量名1  # 将变量名1 接收的数据传递给 对象.变量名
#         self.变量名 = 变量名2  # --> '自己的'
#
#     # 实例方法: 表达实例对象的功能或行为
#     def 实例方法名(self, [参数1], ...):
#         ''' 文档字符串(功能/参数/返回值的说明) '''
#         方法体(实现实例对象的功能)
#
#     # 类方法: 表达所有的实例对象功能或行为 --> 操作类变量
#     @classmethod
#     def 类方法名(cls, [参数1], ...):
#         ''' 文档字符串(功能/参数/返回值的说明) '''
#         方法体(实现所有实例对象共有的功能)
#
#     # 静态方法: 常用于实现功能工具
#     @staticmethod
#     def 静态方法名([参数名1, ..]):
#         ''' 文档字符串(功能/参数/返回值的说明) '''
#         方法体(实现对应的功能)
#
#
# # 实例化过程: 类名()
# # 实例对象: 变量名
# 变量名(实例对象) = 类名()
#
# # 访问实例变量
# 变量名(实例对象).实例变量名
#
# # 修改实例变量
# 变量名(实例对象).实例变量名 = 数据
#
# # 调用实例方法
# 变量名(实例对象).实例方法名([实参1, ...])
#
# # 访问类变量
# 类名.类变量名
#
# # 修改类变量
# 类名.类变量名 = 数据
#
# # 调用类方法
# 类名.类方法名([实参1, ...])
#
# # 调用静态方法
# 类名.静态方法名([实参1, ...])
#
# ''' 2大变量,3大方法 '''
#
# 今日任务:
# 1
# 熟悉面向对象的语法
# 2
# 自行独立完成今日的相关案例及练习
