# 面向对象语法总结:
#
#
# class 类名:
#     # 类变量: 表达所有对象共有的数据  --> '大家的'
#     变量名 = 数据
#
#     # 构造方法: 多用于初始化实例变量
#     def __init__(self, 变量名1, 变量名2, ...)
#         # 实例变量(实例属性): 表达实例对象的特征
#         self.变量名 = 变量名1  # 将变量名1 接收的数据传递给 对象.变量名
#         self.变量名 = 变量名2  # --> '自己的'
#
#     # 实例方法: 表达实例对象的功能或行为
#     def 实例方法名(self, [参数1], ...):
#         ''' 文档字符串(功能/参数/返回值的说明) '''
#         方法体(实现实例对象的功能)
#
#     # 类方法: 表达所有的实例对象功能或行为 --> 操作类变量
#     @classmethod
#     def 类方法名(cls, [参数1], ...):
#         ''' 文档字符串(功能/参数/返回值的说明) '''
#         方法体(实现所有实例对象共有的功能)
#
#     # 静态方法: 常用于实现功能工具
#     @staticmethod
#     def 静态方法名([参数名1, ..]):
#         ''' 文档字符串(功能/参数/返回值的说明) '''
#         方法体(实现对应的功能)
#
#
# # 实例化过程: 类名()
# # 实例对象: 变量名
# 变量名(实例对象) = 类名()
#
# # 访问实例变量
# 变量名(实例对象).实例变量名
#
# # 修改实例变量
# 变量名(实例对象).实例变量名 = 数据
#
# # 调用实例方法
# 变量名(实例对象).实例方法名([实参1, ...])
#
# # 访问类变量
# 类名.类变量名
#
# # 修改类变量
# 类名.类变量名 = 数据
#
# # 调用类方法
# 类名.类方法名([实参1, ...])
#
# # 调用静态方法
# 类名.静态方法名([实参1, ...])

''' 2大变量,3大方法 '''

'''
3大特征:
    1 封装
        场景: 以类为中心,以对象的方式解决问题
        行为:
            隐藏实现的细节,对类外提供必要的功能
        写法:
            __成员
        本质:
            屏蔽: _类名__成员名
        解决方法:
            1 提供2个必要的方法: 读取/写入
            2 在写入方法中实现:数据有效性验证
        实现:
            1 只读
            2 只写
            3 可读可写

    2 继承
        优点: 提高了代码的复用性及可维护性
        缺点: 耦合度高   [高内聚,低耦合]

        父类方法的继承
            class 父类:
                def 方法名(self, [参数1, ...])
                    方法体

            class 子类(父类):
                def 方法名(self, [参数1, ...])
                    方法体

            子类对象 = 子类名([参数1, ...])
            子类对象.自身方法名([参数1, ...])
            子类对象.父类方法名([参数1, ...])

        父类属性的继承
            class 父类:
                def __init__(self, [参数1, ...])
                    self.属性名 = 参数1
                    ...

            class 子类(父类):
                def __init__(self, [参数1, ...])
                    super().__init__(参数1, ...)
                    self.属性名 = 参数1
                    ...

            1 子类中无构造方法: 会调用父类的构造方法
            2 子类中有构造方法: 覆盖父类的构造方法, 使用super()函数调用父类的构造方法,为子类对象添加属性

        多继承
            1 python支持多继承
            2 python3中默认继承object, 可以不写 (新式类)
            3 查看类的同名方法的继承顺序: 子类名.mro()


    3 多态
        定义: 父类在子类中呈现不同的形态
        实现
            重写:
                概念: 子类中存在于父类同名的成员
                前提: 父类的功能不满足子类的需求
        作用:
            - 在继承的基础上，体现子类的个性化。
            - 增强程序扩展性

        将对象转为字符串:
            def __str__(self)
                pass

        运算符重载:
            def __eq__(self)
                pass
'''
