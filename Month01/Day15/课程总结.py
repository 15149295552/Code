"""
能力: 核心理论/核心语法 --> 分析问题+解决问题+编程

1 python核心
1 什么叫python?
免费开源/面向对象/解释型/跨平台的高级计算机编程语言.

    2 python的执行方式?
        1 交互式环境: 测试简单的语句
        2 文件式: pycharm软件

    3 python的执行原理?
        python解释型: 逐行翻译 --> 执行效率较低

        源代码 --> '编译' --> 中间文件(pyc文件) --> 解释器(解释)  --> 机器码

    4 数据
        数据类型:
            不可变数据类型: int/float/bool/str/tuple/frozenset
            可变数据类型:list/dict/set

            不可变 与 可变 区别:
                内存结构:
                    可变: 预留空间
                    不可变: 按需分配
                数据操作:
                    可变: 可修改/删除/增加/查看  (CRUD)
                    不可变: 查看

        变量:
            作用: 用来关联一个数据对象的标识符.
            规则:  '见名知意'
                1 由数字/字母/下划线组成
                2 数字不能开头
                3 区分大小写
                4 不能python关键字
                    import keyword
                    print(keyword.kwlist)
            方法:
                1 驼峰命名法
                2 匈牙利命名法
            赋值:
                变量名 = 数据对象
                变量名1 = 变量名2 = 数据对象
                变量名1, 变量名2 = 数据对象1, 数据对象2   [数据交换]

        python中的自动内存管理机制:
            1 引用计数
            2 循环引用
            3 分代回收

    5 运算符
        算术运算符: +  -  *  /   //  **  %
        增强运算符: +=  -=  *=  /=   //=   **=   %=
        比较运算符: >   >=   <    <=    ==    !=      [=  与  == 区分]
        逻辑运算符: not   and   or
        身份运算符: is/is not    [与 == 区别]

    6 语句
        程序执行的3大结构: 顺序(默认)/选择(if)/循环(while/for)

        1 if 语句
            作用: 有选择性执行某条或某些语句.
            语法:
                if 条件表达式1:
                    语句1
                elif 条件表达式2:
                    语句2
                elif 条件表达式3:
                    语句3
                ...
                else:    # 以上条件都不成立,则执行
                    语句n

            总结:
                1 if语句: 仅判断1种情况
                2 if-else语句: 判断2种情况
                3 if-elif-else语句: 判断3种或3种以上情况 (elif语句可以有多个,条件表达式互斥)
                4 if语句嵌套: 分情况判断,再判断
                5 if条件表达式: 仅适合2种简单的情况判断
                    表达式1 if 语句 else 表达式2
                    如: '偶数' if number > 0 and number % 2 == 0 else '奇数'

        2 循环语句
            1 while
                作用: 重复执行某条或某些语句.
                语法:
                    初始条件
                    while 循环条件:
                        循环体
                        变化条件
                    else: # 当循环条件不成立,则执行 [可省略]
                        语句n

                死循环:
                    定义:真值表达式一直成立的while循环.
                    语法:
                        while True:
                            循环体
                场景:
                    1 用于 [已知循环次] [未知循环次数](主要)的场景.
                    2 循环次数需要被修改.

            2 for
                作用: 遍历可迭代对象中的数据元素.
                语法:
                    for 变量名 in 可迭代对象:
                        循环体
                    else:
                        语句n

                可迭代对象:
                    range([start], stop [,step])
                        作用: 生成一系列[整数]的可迭代对象.
                        场景:
                            1 生成一系列整数
                            2 生成整数对应容器的索引值

                场景:
                    主要用于[已知循环次数] 的场景.

            3 跳转语句
                break
                    作用: 结束当前循环.
                    场景:
                        用于while/for循环中,主要与while死循环结合使用.

                continue
                    作用: 跳过本次循环,继续下一次循环
                    场景:
                        用于while/for循环中,主要条件判断跳过每次数据.

            4 循环嵌套
                1 while循环嵌套
                2 for循环嵌套

                对比:
                    while        初始条件    循环条件    变化条件
                    for(range)     start      stop      step

                总结: 外层循环执行1次,内层循环执行1圈 [外层变化慢,内层变化快]

    7 容器
        1 字符串 - str (*)
            作用: 存储字符(数字/字母/符号等)
            内存: 占用连续内存空间,按需分配
            表示: ''   ""   ''' '''   """ """
            操作:
                拼接: str1 + str2
                重复: str1 * int
                长度: len(str)
                索引: str[index]  --> 返回值: 字符(单个)
                切片: str[[start]:[stop][:step]]  --> 返回值: 字符串(多个)
                存在: str1 in/not in str
            转义字符:
                包含: \t  \n  \r
                取消转义: r''   r""   r''' '''   r""" """
            格式化字符串:
                场景: 生成一定格式的字符串
                方式:
                    1 占位符: 
                        '%d   %f   %s' % (int数据, float数据, str数据)
                        '占位符' % 数据
                    2 format方法
                        '{} {} ...'.format(数据1, 数据2, ...)    
                        '{0} {1} ...'.format(数据1, 数据2, ...)   
                    3 format简写
                        f'{变量名1} {变量名2} ....' 
            常用方法:
                全数字: str.isdigit()
                去除指定字符: str.strip(char=None) 
                替换: str.replace(old, new, count=None)
                次数: str.count(char, start=0, end=len(str))
                索引: str.index(char)
                
            遍历:
                for 变量名 in str:
                    循环体
                
        2 列表 - list (*)
            定义: 存储[任意类型]的 {可变} {有序}的容器
            内存: 占用连续内存空间, 预留空间
            表示: [元素1, 元素2, ...]
            基本操作:
                创建: 变量名 = []
                构造函数: list(iterable)
                查看:
                    长度: len(list)
                    存在: element in/not in list
                    索引: list[index]  -> 返回值: 元素
                    切片: list[[start]:[stop][:step]]  --> 返回值: list
                添加:
                    list.append(element)  --> 追加
                    list.insert(index, element)    --> 插入
                修改:
                    索引赋值: list[index] = value
                    切片赋值: list[[start]:[stop][:step]] = iterable
                        注意: 步长不为1时,切片元素个数必须等于数据个数
                删除:
                    list.remove(element)  --> 从左向右删除第一个匹配的元素 
                    del list[index]   --> 根据索引值删除对应的元素
                    list.clear()   --> 清空列表
                排序:
                    list.sort(key=function, reverse=False)  --> 升序
                遍历:
                    # 方式1
                    for 变量名 in list:
                        # 变量名 对应的是每个元素
                         
                    # 方式2    
                    for 变量名 in range(len(list)):
                        # 变量名 对应的是列表的索引值,通过索引获取元素
                        
                    # 方式3: 反向    
                    for 变量名 in range(len(list)-1, -1, -1):
                        # 变量名 对应的是列表的(反向)索引值,通过索引获取元素
                
                列表删除连续/多个元素的方法:
                    反向遍历 + del list[index]    
            与字符串的互操作:
                list --> str: 'element'.join(list)  --> list中的元素必须是str类型
                str --> list: str.split(char=None)  --> 按照指定元素分割
            面试题:
                1 什么是深浅拷贝,有什么区别?
                2 什么是列表的扩容机制,如何实现?
            场景:
                常用于存储[单一]维度的数据.
            
        3 元组 - tuple
            定义: 存储任意类型 [不可变] [有序] 的容器
            内存: 占用连续内存空间,按需分配
            表示: (元素1, 元素2, ...)
            基本操作:
                创建:
                    变量名 = (元素1, 元素2, ...)
                    变量名 = (元素1,)
                    变量名 = 数据1, 数据2, ...
                构造函数:tuple(iterable)
                查看:
                    存在: element in/not in tuple
                    长度: len(tuple)    
                    索引: tuple[index]  -> 返回值: 元素
                    切片: tuple[[start]:[stop][:step]]  --> 返回值: tuple
                遍历:
                    for 变量名 in tuple:
                        # 变量名对应元组中的各个元素
            列表推导式:
                [表达式 for 变量名 in iterable [if语句]]
            场景:
                1 存储[数量固定]的数据
                2 序列赋值/字符串格式化
                3 常用于作为一些方法的参数
                    
        4 字典 - dict (*)
            定义: 存储 [键值对] 的 [可变] [散列]的容器.
            内存: 占用离散的内存空间, 预留空间
            表示: {key1: value1, key2: value2, ...}
            说明: 无序/key必须是不可变数据类型且唯一
            基本操作:
                创建
                    变量名 = {}
                    变量名 = dict(可迭代对象)
                        dict([(key1, value1), (key2, value2), ...])
                        dict(变量名1=值1, 变量名2=值2, ...)
                查看
                    长度: len(dict)
                    存在: key in/not in dict
                    索引: dict[key]
                          dict.get(key)
                修改/增加
                    dict[key] = value
                        键值对存在.则为: 修改
                        键值对不存在.则为: 增加
                删除
                    del dict[key]
                    dict.remove(key)
                遍历
                    # 方法1
                    for 变量名 in dict:
                        # 变量名接收的是字典的key,取值则需要使用索引:dict[key]
                    
                    # 方法2
                    for 变量名1, 变量名2 in dict.items():
                        # 变量名1对应字典的key,变量名2对应字典的value
                字典推导式:
                    {key表达式:value表达式 for 变量名 in iterable [if 语句]}        
            场景:
                存储的数据存在一一对应关系 (多维的).
                
        5 集合 - set
            定义: 存储不可变数据类型的 [可变] [散列]的无序的容器
            内存: 占用离散的内存空间,预留空间
            表示: {元素1, 元素2, ...}
            查看:
                长度: len(set)
                存在: element in/not in set
            添加: set.add(element) 
            删除:
                set.remove(element)
                set.discard(element)
            遍历:
                for 变量名 in set:
                    # 变量名对应的是集合的每个元素
                   
            作用1: 去重 (存储的元素不重复)
            作用2: 数据运算 (交并补)
                交集: set1 & set2
                并集: set1 | set2
                补集: set1 - set2
                对称集: set1 ^ set2
            集合推导式:
                {表达式 for 变量名 in iterable [if 语句]}
                
        场景:
            存储不重复的元素
            
        ------------------------------------------------------------        
        代码调试:
            1 添加断点
            2 选择 debug 模式
            3 逐步执行 (向下箭头)

    8 函数 function
        内置函数
            print
            input
            id
            type
            len
            sum
            max
            min
            abs   
            int
            float
            bool
            str
            set
            round
            eval('数据')  --> 将字符串作为表达式执行 (还原数据本身的类型)
        自定义函数
            定义: 封装一段代码段
            作用: 实现[一个]特定的功能
            特点: 重用性和可维护性
            语法:
                def 函数名([形参1, ...]):
                    ''' 文档字符串(功能/参数/返回值) '''
                    函数体
                    [return [数据1, 数据2, ...]]
                    
            调用:
                函数名([实参1, 实参2, ...])
            说明:
                1 函数定义后,不调用不会执行
                2 函数调用后,回到函数调用的位置
            语句:
                return语句:
                    说明:
                        函数中无return或return语句后的数据为空,则返回None
                    作用:
                        1 返回函数调用执行的结果
                        2 中断函数的执行
                pass语句:
                    作用: 填充语法的空白
            
            参数:
                实参: 如何给形参传递数据
                    1 位置实参 (按照位置传递)
                    2 序列传参 (*序列 --> 拆解序列)
                    3 关键字实参 (按照名字匹配传递)
                    4 字典关键字实参 (**dict --> 拆解字典)
                
                形参: 约束实参如何传递数据
                    1 缺省参数
                        def 函数名(缺省参数1=默认值1, 缺省参数2=默认值2, ...):
                            ''' 文档字符串 '''
                            函数体
                        说明:
                            1 缺省参数可以有0 1 或多个
                            2 缺省参数在调用时未接收到实参,则使用默认值,否则使用传递的实参
                        注意:
                            缺省参数自右向左依次存在(如果一个参数是缺省参数,则其右侧必须全部是缺省超参数)    
                        
                    2 位置形参
                        按照位置接收实参(个数一致)
                        
                        def 函数名(形参名1, 形参名2, ...):
                            ''' 文档字符串 '''
                            函数体
                    
                    3 星号元组形参
                        接收多个位置实参 (调用时,只能使用:位置实参/序列实参)
                        def 函数名(形参名1, 形参名2, *args):
                            ''' 文档字符串 '''
                            函数体
                        
                        *args: 默认写法, args对应的数据类型时: tuple [合并多个位置实参]
                        
                    4 命名关键字形参
                        调用时限制只能使用关键字传参(或字典关键字传参)
                        
                        def 函数名(形参名1, 形参名2, *args, 形参名3, ...):
                            ''' 文档字符串 '''
                            函数体
                            
                        def 函数名(形参名1, 形参名2, *, 形参名3, ...):
                            ''' 文档字符串 '''
                            函数体
                            
                    
                    5 双星号字典形参
                        接收多个关键字实参
                        def 函数名(形参名1, 形参名2, ..., **kwargs):
                            ''' 文档字符串 '''
                            函数体
                            
                        **kwargs: 默认写法, kwargs对应的数据类型时: dict [合并多个关键字实参]
                        
                    '函数万能写法':
                        def 函数名(*args, **kwargs):
                            ''' 文档字符串 '''
                            函数体  
            
            作用域:
                定义: 变量所作用的范围.
                分类: (LEGB)
                    1 局部作用域    
                    2 外部函数嵌套作用域    
                    3 全局作用域    
                    4 内置模块作用域    
                2个变量:
                    全局变量:
                        定义: 定义在函数外的变量.
                        特点: 可用在整个模块中.
                        
                    局部变量:
                        定义: 定义在函数内的变量.
                        特点: 只能在函数内部使用.
                        
                2个关键字
                    global
                        作用: 声明变量的作用域为全局作用域
                        目的: 在函数内修改全局的不可变类型的数据
                        
                    nonlocal
                        作用: 声明变量的作用域为外部函数嵌套作用域
                        目的: 在函数内修改外部函数嵌套中的不可变类型的数据
                        
            递归函数:
                定义: 在函数调用时又直接或间接调用函数本身的函数.
                过程: 递推 + 回归
                特点:
                    1 必须要有结束条件
                    2 每次递归相较于总体的规模要减少
                    3 递归通常会将上一次的输出作为下次的输入
                注意:
                    栈溢出 (1000层)
                    
            重构
                定义: 在代码写好的前提下,不能修改函数的功能或行为, 改进程序的内部结构.
                目的: 主题鲜明,易于扩展 (优化)        
            
        项目:
            2048项目    

2 python面向对象
概述
面向过程:
定义: 根据需求分解出对应的步骤,逐步实现

        面向对象:
            定义: 根据需求分解为类,找出解决问题的对象,调用实现
            
        类包含:
            类名
            数据: 表达对象的特征或属性
            方法: 表达对象的功能或行为 (本质就是函数)
        
        定义:
            class 类名(object, 父类1, ..):
                # 类变量: 表达所有对象同有的数据
                变量名 = 数据
                
                # 构造方法: 通常用来初始化实例变量
                def __init__(self, 参数1, ...):
                    # 实例变量: 表达实例对象的属性或特征
                    self.实例变量名 = 参数1
                    ...
                    
                # 实例方法: 表达实例对象的功能或行为
                # self: 表示当前类的实例对象
                def 实例方法名(self, [参数名1, ..]):
                    ''' 文档字符串 '''
                    方法体
                
                # 类方法: 表达所有对象共有的行为或功能 (操作类变量)
                # cls: 表示当前的类
                @classmethod
                def 类方法名(cls, [参数名1, ..]):
                    ''' 文档字符串 '''
                    方法体
                    
                # 静态方法: 用来实现特定的工具性质的功能
                @staticmethod
                def 静态方法名([参数名1, ..]):
                    ''' 文档字符串 '''
                    方法体
                
        调用:
            实例成员
                # 实例化对象
                变量名 = 类名(实参1, 实参2, ...)
                    # 在类实例化时,默认调用类的 __init__ 构造方法 
                    # 类名(实参1, 实参2, ...) : 类的实例化
                    # 变量名: 实例对象
                
                # 访问/修改实例变量
                变量名.实例变量名
                变量名.实例变量名 = 数据
                
                # 调用实例方法
                变量名.实例方法名([实参1, ...])
            
            类成员
                # 访问/修改类变量
                类.类变量名
                类.类变量名 = 数据
                
                # 调用实例方法
                类.类方法名([实参1, ...])
            
            静态方法
                # 调用静态方法
                类.静态方法名([实参1, ...])
    
    3大特征:
        封装
            定义: 根据需求分解为不同的类
            行为角度: 
                思想: 对类外提供必要的功能,隐藏实现的细节.
                实现: 私有化
                写法: __成员名
                特点:
                    在类外不能直接访问
                措施:
                    1 提供2个必要的方法: 读取/写入
                    2 在写入方法中实现数据有效性验证
                分类:
                    1 可读可写
                    class 类名:
                        def __init__(self, 形参名1, ...):
                            self.实例变量名 = 形参名1
                            ...
                        
                        @property
                        def 实例变量名(self):    # 读取方法
                            return self.__实例变量名
                            
                        @实例变量名.setter
                        def 实例变量名(self, value):   # 写入方法
                            if value :
                                self.__实例变量名 = value
                            else:
                                raise Exception('提示信息')
                    
                    2 只读
                        class 类名:
                            def __init__(self, 形参名1, ...):
                                self.__实例变量名 = 形参名1
                                ...
                        
                            @property
                            def 实例变量名(self):    # 读取方法
                                return self.__实例变量名
                        
                    3 只写
                        class 类名:
                            def __init__(self, 形参名1, ...):
                                self.实例变量名 = 形参名1
                                ...

                            def set_实例变量名(self, value):   # 写入方法
                                if value :
                                    self.__实例变量名 = value
                                else:
                                    raise Exception('提示信息')
                                    
                            实例变量名 = property(fset=set_实例变量名)
                
        继承
            定义: 子类继承父类,子类具有父类所有的成员,可在此基础上扩展.
            语法:
                class 父类名:
                    pass
                    
                class 子类名(父类名1, ...):
                    pass
                    
            调用:
                1 子类无构造方法,则会自动调用父类的构造方法
                2 子类有构造方法,需要使用 super().__init__(实参1, 实参2, ...) 调用父类的构造方法
            
            继承父类的数据
                语法:
                    class 父类名:
                        pass
                        
                    class 子类名(父类名1, ...):
                        def __init__(self, 形参名1, ...):
                            super().__init__(参数名1, ..)
                            self.实例变量名 = 形参名n
                
                查看:
                    实例对象 = 子类名(实参1, 实参2, ...)
                    实例对象.__dict__     # 查看对象的变量字典
                    
            继承父类的方法
                class 父类名:
                    def 父类方法名(self, 参数名1, ..):
                        ''' 文档字符串 '''
                        方法体 
                        
                class 子类名(父类名1, ...):
                    def 子类方法名(self, 参数名1, ..):
                        ''' 文档字符串 '''
                        方法体 
            
                实例对象 = 子类名(实参1, 实参2, ...)
                实例对象.子类方法名(实参1, 实参2, ...)
                实例对象.父类方法名(实参1, 实参2, ...)
            
            多继承:
                查看类的继承顺序: 类名.mro()
            
        多态
            定义: 父类在子类中呈现不同的形态.
            实现:
                重写: 
                    定义:子类中存在于父类相同的成员
                    特点:调用父类,执行子类(子类覆盖父类同名的成员,实际执行子类的成员)
            
            魔法方法:
                __str__(): 将对象转换为字符串(打印对象时被自动调用)
                __eq__(): 等于方法

3 python高级
1 模块
定义: 将一系列变量/函数/类定义在一个文件中,通常是以 .py 结尾
导入:
import 模块名 [as 别名]
from 模块名 import 成员名 [as 别名]
from 模块名 import *
执行:
1 当第一次调入时,被导入的模块中所有的语句都会执行
2 当再次被调入时,不会再被执行
分类:
1 内置模块
2 自定义模块
3 第三方模块 (丰富)
4 标准库模块
常用模块:
time
random

    2 包
        定义: 将功能类似的模块以文件夹的形式分组管理.
        导入:
            import 包.模块名 as 别名
            from 包 import 模块名 [as 别名]
            from 包.模块名 import 成员名 [as 别名]
            from 包.模块名 import *
        导入成功:
            模块路径 = 系统路径 + 导入路径
            
    3 异常
        定义: 程序运行时的状态.
        特点: 当程序异常后,程序不会继续向下执行,回到函数调用的位置.
        语法:
            try:
                可能发生异常的语句
            except Exception [as 别名]:
                异常处理语句
        目的: 将程序转为正常执行状态.
        
    4 生成器
        定义: 能够动态(循环1次,计算1次,返回1次)生成数据的可迭代对象.
        优点: 节省内存空间.
        生成器函数:
            定义: 含有yield语句的函数.并返回生成器
            语法:
                def 生成器函数名([形参名1, ...]):
                    ...
                    yield 数据
                    ...
            调用:
                for 变量名 in 生成器函数名(实参1, 实参2, ..):
                    循环体
        
        内置的生成器函数:
            enumerate(iterable, start=0)
            zip(iterable1, iterable2)
        
    5 函数式编程思想
        定义: 使用一系列函数解决问题的方式.
        实现:
            1 根据需求定义函数
            2 提取变化点单独定义为函数
            3 将不变的结构定义为通用函数
            4 调用实现对应的需求
    
    6 lambda表达式
        定义: 匿名函数
        语法:
            变量名 = lambada 形参1, ...: 方法体
                # 变量名 接收 lambda 函数对象
        调用:
            变量名(形参1, ...)        
        注意:
            1 不支持方法体为多条语句
            2 不支持赋值语句
        场景:
            使用在一些方法中作为参数
        
    7 高阶函数
        定义: 函数的参数或返回值也是函数
        常见:
            map(function, iterable)  --> 基于函数计算出新的可迭代对象
            filter(function, iterable)  --> '过滤'
            sorted(iterable, key=function, reverse=False)  --> '排序'
            max(iterable, key=function)  --> '最大值'
            min(iterable, key=function)  --> '最小值'
            
    8 闭包
        定义: 将外部函数与内部函数执行的空间打包在一起.
        要素:
            1 必须是函数嵌套
            2 内部函数中必须使用外部函数中的变量
            3 外部函数必须返回内嵌函数
        语法:
            def 函数名(func):
                def wrapper([形参1, ...]):
                    func
                return wrapper
                
            变量名 = 函数名(实参)   # 变量名指向的是内嵌函数的执行空间
            变量名([实参1, ...])
        作用:
            1 实现逻辑连续
            2 实现Python装饰器
            
            
    9 装饰器
        定义: 在不改变原函数的内部结构及调用方式,为其添加新的功能.
        语法:
            # 装饰器函数
            def 装饰器函数名(func):
                def wrapper(*args, **kwargs):
                    # 实现的新功能
                    return func(*args, **kwargs)
                return wrapper
            
            # 使用
            @装饰器函数名     # 原函数名 = 装饰器函数名(原函数名)
            def 原函数名([形参名1, ...]):
                函数体
            
            原函数名([实参1, ...])    # 调用内嵌函数
            
        本质: 拦截
"""
