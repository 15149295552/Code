"""
    时间复杂度
"""
# n1, n2, n3为自然数, 三个数之和为1000，并且n1^2 + n2^2 = n3^2，打印 n1 n2 n3 所有的组合
# for n1 in range(0, 1001):
#     for n2 in range(0, 1001):
#         for n3 in range(0, 1001):
#             if n1+n2+n3 == 1000 and n1**2 + n2**2 == n3**2:
#                 print(n1, n2, n3)


for n1 in range(0, 1001):
    for n2 in range(0, 1001):
        n3 = 1000 - n1 - n2
        if n1**2 + n2**2 == n3**2:
            print(n1, n2, n3)


# 时间复杂度: 算法运算步骤的数量，和执行时间无关
# 表示方式：大O表示法
# 示例：T(n) = O(xxx)
# 常见时间复杂度：
#   O(1) < O(logn) < O(n) < O(nlogn) < O(n^2) < O(n^3)
# 时间复杂度越高,程序执行效率越低
# 示例
#   O(nlogn): 归并排序 快速排序
#   O(logn): 二分查找
#   O(1): 列表中查找元素 - li[5]
#   O(n): 链表中查找元素 - 查找链表中的第5个节点
#   一层循环是O(n),两层循环嵌套是O(n^2),三层循环嵌套是O(n^3)





